package event

// import (
// 	"database/sql"
// 	"fmt"
// 	"io"
// 	"log"
// 	"nirun/pkg/database"
// 	"nirun/pkg/flexmessage"
// 	"nirun/pkg/models"
// 	"nirun/service"
// 	"regexp"
// 	"strconv"
// 	"unicode"

// 	// "nirun/service"
// 	"os"
// 	"strings"
// 	"time"

// 	"github.com/line/line-bot-sdk-go/linebot"
// )

// var usercardidState = make(map[string]string)
// var userState = make(map[string]string)                 //‡πÄ‡∏Å‡πá‡∏östate
// var userActivity = make(map[string]string)              // ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
// var userCheckInStatus = make(map[string]bool)           // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE
// var userLastWorktimeAction = make(map[string]time.Time) // ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô/‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
// var userActivityInfoID = make(map[string]int)           // ‡πÄ‡∏Å‡πá‡∏ö activity_info_id ‡∏ï‡∏≤‡∏° userID
// var userActivityRecordID = make(map[string]int)         // ‡πÄ‡∏Å‡πá‡∏ö activityRecord_ID ‡∏ï‡∏≤‡∏° State ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
// var userActivityCategory = make(map[string]string)      // ‡πÄ‡∏Å‡πá‡∏ö‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
// var userActivityStartDate = make(map[string]time.Time)  // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// var userActivityEndDate = make(map[string]time.Time)    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// var employeeLoginStatus = make(map[string]string)       // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô {employeeID: userID}
// var userImageTimestamps = make(map[string]time.Time)    // ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û

// // HandleEvent - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE
// func HandleEvent(bot *linebot.Client, event *linebot.Event) {
// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
// 	switch message := event.Message.(type) {
// 	case *linebot.TextMessage: // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å TextMessage
// 		text := strings.TrimSpace(message.Text)
// 		log.Println("Received TextMessage:", text)
// 		State := event.Source.UserID
// 		log.Println("User state: ", State)

// 		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
// 		switch text {
// 		case "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
// 			handleElderlyInfoStste(bot, event, State)
// 		case "‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô":
// 			handleWorktimeStste(bot, event, State)
// 		case "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£":
// 			handleServiceRecordStste(bot, event, State)
// 		default:
// 			handleDefault(bot, event)
// 		}

// 		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
// 		state, exists := userState[State]
// 		if exists {
// 			switch state {
// 			case "wait status worktime":
// 				handleWorktime(bot, event, State)
// 			case "wait status worktimeConfirmCheckIn":
// 				log.Println("‚úÖ State matched: wait status worktimeConfirmCheckIn")

// 				// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// 				db, err := database.ConnectToDB()
// 				if err != nil {
// 					log.Println("‚ùå Database connection error:", err)
// 					sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 					return
// 				}
// 				defer db.Close()

// 				// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
// 				userInfo, err := GetUserInfoByLINEID(db, event.Source.UserID)
// 				if err != nil {
// 					log.Println("‚ùå Error fetching user info:", err)
// 					sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 					return
// 				}
// 				log.Printf("üìå Fetched user info: %+v", userInfo)

// 				// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// 				checkedIn, err := IsEmployeeCheckedIn(db, userInfo.UserInfo_ID)
// 				if err != nil {
// 					log.Println("‚ùå Error checking user status:", err)
// 					sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 					return
// 				}
// 				log.Printf("üìå checkedIn status: %v", checkedIn)

// 				// ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô/‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå
// 				UpdateWorktimeUI(bot, event, userInfo, checkedIn)
// 				return
// 			case "wait status ElderlyInfoRequest":
// 				handlePateintInfo(bot, event, State)
// 			case "wait status handleServiceGetCardID":
// 				handleServiceGetCardID(bot, event, State)
// 			case "wait status ServiceSelection":
// 				handleServiceSelection(bot, event, State)
// 			// case "wait status ServiceRecordRequest":
// 			// 	handleServiceInfo(bot, event, State)
// 			case "wait status ActivitySelection":
// 				handleActivitySelection(bot, event, State)
// 			case "wait status CustomActivity":
// 				handleCustomActivity(bot, event, State)
// 			case "wait status Activityrecord":
// 				handleActivityrecord(bot, event, State)
// 			// case "wait status ActivityStartDate":
// 			// 	handleActivityStartDate(bot, event, State)
// 			// case "wait status ActivityStartTime":
// 			// 	handleActivityStartTime(bot, event, State)
// 			// case "wait status ActivityEndDate":
// 			// 	handleActivityEndDate(bot, event, State)
// 			// case "wait status ActivityEndTime":
// 			// 	handleActivityEndTime(bot, event, State)
// 			case "wait status ActivityStart":
// 				handleActivityStart(bot, event, State)
// 			case "wait status ActivityEnd":
// 				handleActivityEnd(bot, event, State)

// 			// case "wait status ConfirmOrSaveEmployee":
// 			// 	handleUserChoiceForActivityRecord(bot, event, State, "")
// 			case "wait status ConfirmOrSaveEmployee":
// 				if textMessage, ok := event.Message.(*linebot.TextMessage); ok {
// 					selection := strings.TrimSpace(textMessage.Text) // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
// 					log.Printf("Handling selection: %s", selection)  // ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤
// 					handleUserChoiceForActivityRecord(bot, event, State, selection)
// 				} else {
// 					log.Printf("Unexpected message type in ConfirmOrSaveEmployee state")
// 				}
// 			case "wait status SaveEmployeeName":
// 				handleSaveEmployeeName(bot, event, State, State, "")
// 			default:
// 				log.Printf("Unhandled state for user %s: %s", State, state)
// 			}
// 		}

// 	case *linebot.ImageMessage: // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å ImageMessage
// 		State := event.Source.UserID
// 		state, exists := userState[State]
// 		if exists {
// 			switch state {
// 			case "wait status Saveavtivityend":
// 				log.Printf("Received ImageMessage: ID=%s", message.ID)
// 				handleSaveavtivityend(bot, event, usercardidState[event.Source.UserID], event.Source.UserID)
// 			case "wait status saveEvidenceImageafterActivity":
// 				handlesaveEvidenceImageafterActivity(bot, event, usercardidState[event.Source.UserID], event.Source.UserID)
// 			}
// 		}

// 	default:
// 		log.Printf("Unhandled message type: %T", event.Message)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ.")
// 	}
// }

// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
// func setUserState(userID, state string) {
// 	userState[userID] = state
// 	log.Printf("Set user state for user %s to %s", userID, state)
// }

// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∏‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
// func getUserState(userID string) (string, bool) {
// 	state, exists := userState[userID]
// 	return state, exists
// }

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏î "‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô" ‡∏ã‡πâ‡∏≥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 40 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// func isRecentWorktimeAction(userID string) bool {
// 	lastActionTime, exists := userLastWorktimeAction[userID]
// 	if !exists {
// 		return false
// 	}
// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 40 ‡∏ô‡∏≤‡∏ó‡∏µ
// 	if time.Since(lastActionTime) < 40*time.Minute {
// 		log.Printf("‚è≥ User %s pressed worktime button within 40 minutes. Locking action.", userID)
// 		return true
// 	}
// 	return false
// }

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï timestamp ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô/‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå
// func updateWorktimeAction(userID string) {
// 	userLastWorktimeAction[userID] = time.Now()
// }

// // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
// func handleWorktimeStste(bot *linebot.Client, event *linebot.Event, State string) {
// 	userID := event.Source.UserID

// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 40 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// 	if isRecentWorktimeAction(userID) {
// 		// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° Quick Reply
// 		quickReply := linebot.NewQuickReplyItems(
// 			linebot.NewQuickReplyButton("", linebot.NewMessageAction("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô")),
// 			linebot.NewQuickReplyButton("", linebot.NewMessageAction("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")),
// 		)

// 		replyMessage := linebot.NewTextMessage("‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?").
// 			WithQuickReplies(quickReply)

// 		if _, err := bot.ReplyMessage(event.ReplyToken, replyMessage).Do(); err != nil {
// 			log.Println("‚ùå Error sending Quick Reply message:", err)
// 		}

// 		// ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
// 		setUserState(userID, "wait status worktime")
// 		return
// 	}

// 	// ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô
// 	updateWorktimeAction(userID) // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å timestamp
// 	setUserState(State, "wait status worktime")
// }

// // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// func handleElderlyInfoStste(bot *linebot.Client, event *linebot.Event, State string) {
// 	// userID := event.Source.UserID
// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE
// 	// if isUserCheckedIn(userID) {
// 	// 	return
// 	// }

// 	// ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
// 	setUserState(State, "wait status ElderlyInfoRequest")
// }

// // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// func handleServiceRecordStste(bot *linebot.Client, event *linebot.Event, State string) {
// 	// userID := event.Source.UserID

// 	// // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE
// 	// if isUserCheckedIn(userID) {
// 	// 	return
// 	// }

// 	// ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
// 	// sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô 1234567891234 :")

// 	// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
// 	setUserState(State, "wait status handleServiceGetCardID")
// }

// // **********************************************************************************************************

// func getUserProfile(bot *linebot.Client, userID string) (*linebot.UserProfileResponse, error) {
// 	profile, err := bot.GetProfile(userID).Do()
// 	if err != nil {
// 		return nil, err
// 	}
// 	return profile, nil
// }

// // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
// func sendCustomReply(bot *linebot.Client, replyToken string, userID string, greetingMessage string, messages ...linebot.SendingMessage) {
// 	if len(messages) == 0 {
// 		return
// 	}

// 	// ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
// 	if greetingMessage == "" {
// 		profile, err := getUserProfile(bot, userID)
// 		if err == nil {
// 			greetingMessage = fmt.Sprintf("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö %s! ", profile.DisplayName)
// 		} else {
// 			greetingMessage = "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö!"
// 		}
// 	}

// 	// ‡πÅ‡∏ó‡∏£‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
// 	messages = append([]linebot.SendingMessage{linebot.NewTextMessage(greetingMessage)}, messages...)

// 	if _, err := bot.ReplyMessage(replyToken, messages...).Do(); err != nil {
// 		log.Printf("Error replying message sendCustomReply: %v", err)
// 	}
// }
// func sendQRCodeForLogin(bot *linebot.Client, replyToken string) {
// 	flexmessage.SendRegisterLink(bot, replyToken)
// }

// //*************************************************************************************************************

// // // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
// // func isEmployeeLoggedIn(employeeID, userID string) bool {
// // 	currentUser, exists := employeeLoginStatus[employeeID]
// // 	return exists && currentUser != userID
// // }

// // // ‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
// // func lockEmployeeLogin(employeeID, userID string) bool {
// // 	if isEmployeeLoggedIn(employeeID, userID) {
// // 		return false // ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
// // 	}
// // 	employeeLoginStatus[employeeID] = userID
// // 	return true
// // }

// // // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
// // func unlockEmployeeLogin(employeeID string) {
// // 	delete(employeeLoginStatus, employeeID)
// // }

// //*************************************************************************************

// // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
// func isUserCheckedIn(userID string) bool {
// 	status, exists := userCheckInStatus[userID]
// 	return exists && status
// }

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
// func isUserRegistered(userID string) bool {
// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô userState ‡∏´‡∏£‡∏∑‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// 	state, exists := userState[userID]
// 	return exists && state == "registered"
// }

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô"
// func handleWorktime(bot *linebot.Client, event *linebot.Event, userID string) {
// 	log.Println("Processing worktime for user:", userID)

// 	db, err := database.ConnectToDB()
// 	if err != nil {
// 		log.Println("‚ùå Database connection error:", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}
// 	defer db.Close()

// 	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° LINE ID
// 	userInfo, err := GetUserInfoByLINEID(db, userID)
// 	if err != nil {
// 		log.Println("‚ùå Error fetching user info:", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏ô‡∏µ‡πâ.")
// 		return
// 	}

// 	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
// 	checkedIn, err := IsEmployeeCheckedIn(db, userInfo.UserInfo_ID)
// 	if err != nil {
// 		log.Println("‚ùå Error checking user status:", err)
// 		return
// 	}

// 	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
// 	message := strings.TrimSpace(event.Message.(*linebot.TextMessage).Text)

// 	switch message {
// 	case "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô":
// 		log.Println("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤")
// 		log.Println("üîç User confirmed worktime action")
// 		updateWorktimeAction(userID)
// 		setUserState(userID, "wait status worktime")

// 		// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå"
// 		UpdateWorktimeUI(bot, event, userInfo, checkedIn)

// 	case "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
// 		log.Println("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")

// 	case "‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô":
// 		log.Println("‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô")
// 		processCheckIn(bot, event, db, userInfo, userID)

// 	case "‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå":
// 		log.Println("‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå")
// 		processCheckOut(bot, event, db, userInfo, userID)

// 	default:
// 		UpdateWorktimeUI(bot, event, userInfo, checkedIn)
// 	}
// }

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô
// func confirmWorktimeAction(bot *linebot.Client, event *linebot.Event, userID string, db *sql.DB, userInfo *models.User_info, checkedIn bool, message string) {
// 	if message == "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô" {
// 		log.Println("‚úÖ User confirmed worktime action")
// 		// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô
// 		updateWorktimeAction(userID)
// 		setUserState(userID, "wait status worktime") // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô worktime ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô

// 		// ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå
// 		UpdateWorktimeUI(bot, event, userInfo, checkedIn)
// 	} else if message == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" {
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
// 		setUserState(userID, "wait status worktime") // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
// 	}
// }

// // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å "‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô"
// func processCheckIn(bot *linebot.Client, event *linebot.Event, db *sql.DB, userInfo *models.User_info, userID string) {
// 	err := RecordCheckIn(db, userInfo.UserInfo_ID)
// 	if err != nil {
// 		log.Println("‚ùå Error recording check-in:", err)
// 		sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Check-in ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	updateWorktimeAction(userID)
// 	log.Println("updateWorktimeAction ", userID)
// 	setUserState(userID, "wait status checkOut")
// 	log.Println("setUserState CheckOut", userID)

// 	// ‚úÖ ‡∏™‡πà‡∏á Flex Message
// 	worktimeRecord := &models.WorktimeRecord{
// 		UserInfo: &models.User_info{Name: userInfo.Name},
// 		CheckIn:  time.Now(),
// 	}

// 	flexMessage := flexmessage.FormatworktimeCheckin(worktimeRecord)
// 	if _, err := bot.PushMessage(userID, flexMessage).Do(); err != nil {
// 		log.Println("‚ùå Error flexMessage FormatworktimeCheckin:", err)
// 	}
// 	log.Println("‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥", flexMessage)
// }

// // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å "‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå"
// func processCheckOut(bot *linebot.Client, event *linebot.Event, db *sql.DB, userInfo *models.User_info, userID string) {
// 	checkedIn, err := IsEmployeeCheckedIn(db, userInfo.UserInfo_ID)
// 	if err != nil {
// 		log.Println("‚ùå Error checking user status:", err)
// 		// sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	if !checkedIn {
// 		UpdateWorktimeUI(bot, event, userInfo, false)
// 		return
// 	}

// 	// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå
// 	err = RecordCheckOut(db, userInfo.UserInfo_ID)
// 	if err != nil {
// 		log.Println("‚ùå Error recording check-out:", err)
// 		sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Check-out ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	updateWorktimeAction(userID)
// 	userState[userID] = "wait status checkIn"

// 	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
// 	worktimeRecord, err := GetWorktimeRecordByUserID(db, userInfo.UserInfo_ID)
// 	if err != nil {
// 		log.Println("‚ùå Error fetching worktime record:", err)
// 		// sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
// 	worktimeRecord = &models.WorktimeRecord{
// 		UserInfo: &models.User_info{Name: userInfo.Name},
// 		CheckOut: time.Now(),
// 		Period:   worktimeRecord.Period,
// 	}

// 	flexMessage := flexmessage.FormatworktimeCheckout(worktimeRecord)
// 	if _, err := bot.PushMessage(userID, flexMessage).Do(); err != nil {
// 		log.Println("Error flexMessage FormatworktimeCheckout:", err)
// 	}
// 	log.Println("‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå‡∏õ‡∏Å‡∏ï‡∏¥", flexMessage)
// }

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô / ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå
// func UpdateWorktimeUI(bot *linebot.Client, event *linebot.Event, userInfo *models.User_info, checkedIn bool) {
// 	worktimeRecord := &models.WorktimeRecord{
// 		UserInfo: &models.User_info{Name: userInfo.Name},
// 		CheckIn:  time.Now(),
// 		CheckOut: time.Time{},
// 	}

// 	var flexMessage *linebot.FlexMessage
// 	if checkedIn {
// 		flexMessage = flexmessage.FormatConfirmCheckout(worktimeRecord)
// 		setUserState(event.Source.UserID, "wait status worktime") // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå"
// 	} else {
// 		flexMessage = flexmessage.FormatConfirmCheckin(worktimeRecord)
// 		setUserState(event.Source.UserID, "wait status worktime") // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô"
// 	}

// 	// ‡∏™‡πà‡∏á Flex Message ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô/‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏ó‡πå
// 	if _, err := bot.ReplyMessage(event.ReplyToken, flexMessage).Do(); err != nil {
// 		log.Println("‚ùå Error sending Flex Message:", err)
// 	}
// }

// // func resetUserState(userID string) {
// // 	delete(userState, userID)
// // 	delete(userActivity, userID)
// // 	delete(usercardidState, userID)
// // 	log.Printf("Reset state for user %s", userID)
// // }

// func sanitizeCardID(s string) string {
// 	var builder strings.Builder
// 	for _, char := range s {
// 		if unicode.IsDigit(char) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
// 			builder.WriteRune(char)
// 		}
// 	}
// 	return builder.String()
// }

// // ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// func handlePateintInfo(bot *linebot.Client, event *linebot.Event, userID string) {
// 	state, exists := getUserState(userID)
// 	if !exists || state != "wait status ElderlyInfoRequest" {
// 		log.Printf("Invalid state for user %s. Current state: %s", userID, state)
// 		sendReply(bot, event.ReplyToken, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
// 	message := strings.TrimSpace(event.Message.(*linebot.TextMessage).Text)

// 	db, err := database.ConnectToDB()
// 	if err != nil {
// 		log.Println("Database connection error:", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}
// 	defer db.Close()

// 	// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö = "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
// 	if message == "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" {
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô 1234567891234 :")
// 		return
// 	}

// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (cardID)
// 	cardID := sanitizeCardID(message)
// 	if len(cardID) != 13 {
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô 1234567891234 :")
// 		return
// 	}
// 	log.Println("‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:", cardID)

// 	patient, err := service.PostRequestPatientByID(cardID)
// 	if err != nil {
// 		log.Println("ErE:", err)
// 		return
// 	}
// 	log.Println("Papatient:", patient)
// 	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å CardID

// 	flexMessage := flexmessage.FormatPatientInfo(patient)
// 	if _, err := bot.PushMessage(userID, flexMessage).Do(); err != nil {
// 		log.Println("Error sending push message:", err)
// 	}

// 	log.Println("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢:", flexMessage)
// 	// userState[userID] = ""
// }

// func isNumeric(s string) bool {
// 	for _, c := range s {
// 		if c < '0' || c > '9' {
// 			return false
// 		}
// 	}
// 	return true
// }

// // func parseDateInput(input string) (time.Time, error) {
// // 	// ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô lower case
// // 	input = strings.TrimSpace(strings.ToLower(input))

// // 	// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î regex ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ
// // 	re := regexp.MustCompile(`^(\d{1,2})/(\d{1,2})/(\d{4})$`)
// // 	match := re.FindStringSubmatch(input)

// // 	if len(match) == 0 {
// // 		return time.Time{}, fmt.Errorf("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡πÄ‡∏ä‡πà‡∏ô 01/01/2567")
// // 	}

// // 	// ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å regex match
// // 	day, month, yearStr := match[1], match[2], match[3]

// // 	// ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô int
// // 	year, _ := strconv.Atoi(yearStr)

// // 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®. ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// // 	if year > 2500 {
// // 		year -= 543 // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‚Üí ‡∏Ñ.‡∏®.
// // 	}

// // 	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤
// // 	dateStr := fmt.Sprintf("%s/%s/%d", day, month, year)
// // 	layout := "02/01/2006"
// // 	parsedDate, err := time.Parse(layout, dateStr)
// // 	if err != nil {
// // 		return time.Time{}, fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ")
// // 	}

// // 	return parsedDate, nil
// // }

// // func parseTimeInput(input string) (time.Time, error) {
// // 	// ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô lower case
// // 	input = strings.TrimSpace(strings.ToLower(input))

// // 	// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î regex ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
// // 	re := regexp.MustCompile(`^(\d{1,2})[:.](\d{2})\s*(‡∏ô\.?|‡∏ô)?$`)
// // 	match := re.FindStringSubmatch(input)

// // 	if len(match) == 0 {
// // 		return time.Time{}, fmt.Errorf("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏ä‡πà‡∏ô 11:20 ‡∏ô.")
// // 	}

// // 	// ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å regex match
// // 	hour, min := match[1], match[2]

// // 	// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
// // 	hourInt, _ := strconv.Atoi(hour)
// // 	minInt, _ := strconv.Atoi(min)

// // 	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤
// // 	return time.Date(0, 0, 0, hourInt, minInt, 0, 0, time.UTC), nil
// // }

// func handleServiceGetCardID(bot *linebot.Client, event *linebot.Event, State string) {
// 	if userState[State] != "wait status handleServiceGetCardID" {
// 		log.Printf("Invalid state for user %s. Current state: %s", State, userState[State])
// 		return
// 	}

// 	// db, err := database.ConnectToDB()
// 	// if err != nil {
// 	// 	log.Println("Database connection error:", err)
// 	// 	sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 	// 	return
// 	// }
// 	// defer db.Close()

// 	userID := event.Source.UserID

// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
// 	userInfo, err := service.GetUserInfoByLINEID(userID)
// 	if err != nil {
// 		log.Println("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö LINE ID ‡∏ô‡∏µ‡πâ.")
// 		sendReply(bot, event.ReplyToken, "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•.")
// 		return
// 	}

// 	isCheckedIn, err := service.IsEmployeeCheckedIn(userInfo.UserInfo_ID)
// 	if err != nil {
// 		log.Println("Error checking worktime status:", err)
// 		sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	if !isCheckedIn {
// 		sendReply(bot, event.ReplyToken, "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£.")
// 		return
// 	}

// 	//‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
// 	message := strings.TrimSpace(event.Message.(*linebot.TextMessage).Text)

// 	// ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
// 	if message == "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" {
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô 1234567891234 :")
// 		return
// 	}

// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
// 	cardID := sanitizeCardID(message)
// 	if len(cardID) != 13 {
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô 1234567891234 :")
// 		return
// 	}
// 	log.Println("‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:", cardID)

// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// 	patient, err := service.PostRequestPatientByID(cardID)
// 	if err != nil || patient == nil {
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
// 		return
// 	}

// 	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cardID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
// 	usercardidState[State] = cardID
// 	setUserState(State, "wait status ActivitySelection")

// 	// ‡πÉ‡∏ä‡πâ `PushMessage()` ‡πÅ‡∏ó‡∏ô `ReplyMessage()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ reply token
// 	flexMessage := flexmessage.FormatActivityCategories()
// 	if _, err := bot.PushMessage(event.Source.UserID, flexMessage).Do(); err != nil {
// 		log.Println("Error sending activity category selection:", err)
// 	}
// }

// func handleServiceSelection(bot *linebot.Client, event *linebot.Event, State string) {
// 	// if userState[State] != "wait status ServiceSelection" {
// 	// 	log.Printf("Invalid state for user %s. Current state: %s", State, userState[State])
// 	// 	return
// 	// }

// 	// // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
// 	// message := event.Message.(*linebot.TextMessage).Text

// 	// switch message {
// 	// case "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°":
// 	// 	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å `handleServiceInfo`
// 	// 	setUserState(State, "wait status ActivitySelection")
// 	// 	log.Printf("User %s state changed to: %s", State, "wait status ActivitySelection")
// 	// 	flexMessage := flexmessage.FormatActivityCategories()
// 	// 	if _, err := bot.PushMessage(event.Source.UserID, flexMessage).Do(); err != nil {
// 	// 		log.Println("Error sending activity category selection:", err)
// 	// 	}
// 	// 	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// 	// 	handleActivitySelection(bot, event, State)

// 	// case "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤":
// 	// 	// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "wait status ReportIssue"
// 	// 	setUserState(State, "wait status ReportIssue")
// 	// 	log.Printf("User %s state changed to: %s", State, "wait status ReportIssue")

// 	// 	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
// 	// 	// handleReportIssue(bot, event, State)

// 	// default:
// 	// 	sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤'")
// 	// }
// }

// // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// func handleActivitySelection(bot *linebot.Client, event *linebot.Event, State string) {
// 	if userState[State] != "wait status ActivitySelection" {
// 		log.Printf("Invalid state for user %s. Current state: %s", State, userState[State])
// 		return
// 	}

// 	//‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
// 	category := strings.TrimSpace(event.Message.(*linebot.TextMessage).Text)
// 	log.Printf("User selected category: %s", category)

// 	//‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
// 	if category == "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö" {
// 		sendActivityCategorySelection(bot, event)            //Flex Message ‡∏°‡∏¥‡∏ï‡∏¥
// 		setUserState(State, "wait status ActivitySelection") // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏¥‡∏ï‡∏¥
// 		return
// 	}
// 	//‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°`category_id`
// 	categoryMapping := map[string]int{
// 		"‡∏°‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û":      4,
// 		"‡∏°‡∏¥‡∏ï‡∏¥‡∏™‡∏±‡∏á‡∏Ñ‡∏°":       5,
// 		"‡∏°‡∏¥‡∏ï‡∏¥‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à":    6,
// 		"‡∏°‡∏¥‡∏ï‡∏¥‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°": 7,
// 		"‡∏°‡∏¥‡∏ï‡∏¥‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ":   8,
// 		"‡∏°‡∏¥‡∏ï‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ":       9,
// 	}

// 	categoryID, exists := categoryMapping[category]
// 	if !exists {
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π")
// 		return
// 	}

// 	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô State
// 	userActivityCategory[State] = category
// 	log.Printf("Updated user activity category: %s", category)
// 	//‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å API JSON-RPC ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
// 	fetchAndShowActivities(bot, event, State,categoryID)

// 	if category == "9" {
// 		//‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏≠‡∏á
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:")
// 		userState[State] = "wait status CustomActivity"
// 	} else {
// 		//‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å API JSON-RPC ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
// 		fetchAndShowActivities(bot, event, State, categoryID)
// 	}
// }

// // ‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏¥‡∏ï‡∏¥‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
// func fetchAndShowActivities(bot *linebot.Client, event *linebot.Event, State string, categoryID int) {
// 		// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô state
// 		userActivityCategory[State] = fmt.Sprintf("%d", categoryID)
	
// 		// ‡πÉ‡∏ä‡πâ API JSON-RPC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// 		activityList, err := service.PostActivitiesByCategory(categoryID)
// 		if err != nil {
// 			log.Printf("‚ùå Error fetching activities from API: %v", err)
// 			sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 			return
// 		}
	
// 		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// 		if len(activityList) == 0 {
// 			sendReply(bot, event.ReplyToken, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô.")
// 			return
// 		}
	
// 		// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ Flex Message ‡∏ï‡∏≤‡∏° categoryID
// 		var flexMessage *linebot.FlexMessage
// 		switch categoryID {
// 		case 4: // ‡∏°‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
// 			flexMessages := flexmessage.FormatActivitieshealthCarousel(activityList)
// 			// ‡∏™‡πà‡∏á Carousel ‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏ä‡∏∏‡∏î ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 9 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
// 			for _, msg := range flexMessages {
// 				if _, err := bot.PushMessage(event.Source.UserID, msg).Do(); err != nil {
// 					log.Println("‚ùå Error sending activity list:", err)
// 				}
// 			}
// 			return
// 		case 5: // ‡∏°‡∏¥‡∏ï‡∏¥‡∏™‡∏±‡∏á‡∏Ñ‡∏°
// 			flexMessage = flexmessage.FormatActivitiessocialCarousel(activityList)
// 		case 6: // ‡∏°‡∏¥‡∏ï‡∏¥‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à
// 			flexMessage = flexmessage.FormatActivitieseconomicCarousel(activityList)
// 		case 7: // ‡∏°‡∏¥‡∏ï‡∏¥‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
// 			flexMessage = flexmessage.FormatActivitiesenvironmentalCarousel(activityList)
// 		case 8: // ‡∏°‡∏¥‡∏ï‡∏¥‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ
// 			flexMessage = flexmessage.FormatActivitiestechnologyCarousel(activityList)
// 		default:
// 			log.Printf("‚ùå Invalid category selection: %d", categoryID)
// 			sendReply(bot, event.ReplyToken, "‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 			return
// 		}
	
// 		// üîπ ‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE Bot
// 		if _, err := bot.PushMessage(event.Source.UserID, flexMessage).Do(); err != nil {
// 			log.Println("‚ùå Error sending activity list:", err)
// 			sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 			return
// 		}
	
// 		// üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
// 		setUserState(State, "wait status Activityrecord")
// 	}

// // // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏¥‡∏ï‡∏¥‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏≤‡∏Å‡∏Å‡∏î‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
// func sendActivityCategorySelection(bot *linebot.Client, event *linebot.Event) {
// 	// log.Println("Sending activity category selection...")

// 	//‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏°‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
// 	delete(userActivityCategory, event.Source.UserID)

// 	//‡∏™‡πà‡∏á Flex Message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏¥‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà
// 	flexMessage := flexmessage.FormatActivityCategories()
// 	if _, err := bot.PushMessage(event.Source.UserID, flexMessage).Do(); err != nil {
// 		log.Println("Error sending activity category selection:", err)
// 	}
// }

// // ‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏°‡∏¥‡∏ï‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
// func handleCustomActivity(bot *linebot.Client, event *linebot.Event, State string) {
// 	if userState[State] != "wait status CustomActivity" {
// 		log.Printf("Invalid state for user %s. Current state: %s", State, userState[State])
// 		return
// 	}

// 	// ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏≠‡∏á
// 	activity := strings.TrimSpace(event.Message.(*linebot.TextMessage).Text)
// 	log.Printf("User entered custom activity: %s", activity)

// 	if activity == "" {
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
// 		return
// 	}

// 	db, err := database.ConnectToDB()
// 	if err != nil {
// 		log.Println("Database connection error:", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}
// 	defer db.Close()

// 	//‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
// 	userActivity[State] = activity

// 	// // ‡∏™‡πà‡∏á Flex Message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// 	// flexContainer := flexmessage.FormatStartActivity(activity)
// 	// flexMessage := linebot.NewFlexMessage("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", flexContainer)
// 	// if _, err := bot.ReplyMessage(event.ReplyToken, flexMessage).Do(); err != nil {
// 	// 	log.Printf("Error sending Flex Message: %v", err)
// 	// }

// 	//‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
// 	userState[State] = "wait status ActivityStart"
// 	sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n‡πÄ‡∏ä‡πà‡∏ô 01/01/2567")
// }

// // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß
// func handleActivityrecord(bot *linebot.Client, event *linebot.Event, State string) {
// 	log.Println("wait status Activityrecord:", userState)

// 	if userState[State] != "wait status Activityrecord" {
// 		log.Printf("Invalid state for user %s. Current state: %s", State, userState[State])
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà:")
// 		return
// 	}

// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
// 	message, ok := event.Message.(*linebot.TextMessage)
// 	if !ok {
// 		log.Println("Event is not a text message")
// 		return
// 	}

// 	// ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
// 	activity := strings.TrimSpace(strings.ToLower(message.Text))
// 	log.Printf("Received activity input: %s", activity)

// 	//‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö" ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏¥‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà
// 	if activity == "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö" {
// 		log.Println("User chose to go back. Resetting state...")

// 		//‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
// 		delete(userActivityCategory, State)

// 		//‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ State ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏¥‡∏ï‡∏¥
// 		setUserState(State, "wait status ActivitySelection")

// 		//‡∏™‡πà‡∏á Flex Message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏¥‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà
// 		sendActivityCategorySelection(bot, event)
// 		return
// 	}

// 	db, err := database.ConnectToDB()
// 	if err != nil {
// 		log.Println("Database connection error:", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}
// 	defer db.Close()

// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// 	category, exists := userActivityCategory[State]
// 	if !exists {
// 		sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}
// 	log.Println("category:%s", category)

// 	// ‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏°‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
// 	var validActivities []string
// 	switch category {
// 	case "technology":
// 		activityList, err := GetTechnologyActivities(db)
// 		if err == nil {
// 			for _, act := range activityList {
// 				validActivities = append(validActivities, strings.TrimSpace(strings.ToLower(act.ActivityTechnology)))
// 			}
// 		}
// 	case "social":
// 		activityList, err := GetSocialActivities(db)
// 		if err == nil {
// 			for _, act := range activityList {
// 				validActivities = append(validActivities, strings.TrimSpace(strings.ToLower(act.ActivitySocial)))
// 			}
// 		}
// 	case "health":
// 		activityList, err := GetHealthActivities(db)
// 		if err == nil {
// 			for _, act := range activityList {
// 				validActivities = append(validActivities, strings.TrimSpace(strings.ToLower(act.ActivityHealth)))
// 			}
// 		}
// 	case "economic":
// 		activityList, err := GetEconomicActivities(db)
// 		if err == nil {
// 			for _, act := range activityList {
// 				validActivities = append(validActivities, strings.TrimSpace(strings.ToLower(act.ActivityEconomic)))
// 			}
// 		}
// 	case "environmental":
// 		activityList, err := GetEnvironmentalActivities(db)
// 		if err == nil {
// 			for _, act := range activityList {
// 				validActivities = append(validActivities, strings.TrimSpace(strings.ToLower(act.ActivityEnvironmental)))
// 			}
// 		}
// 	default:
// 		log.Println("Invalid category:", category)
// 		sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}
// 	// log.Println("validActivities:%s", validActivities)

// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// 	isValid := false
// 	for _, validActivity := range validActivities {
// 		if activity == validActivity {
// 			isValid = true
// 			break
// 		}
// 	}

// 	if !isValid {
// 		sendReply(bot, event.ReplyToken, fmt.Sprintf("‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° '%s' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î", activity))
// 		return
// 	}

// 	// ‡∏î‡∏∂‡∏á activity_info_id
// 	activityID, err := GetActivityInfoIDByType(db, category, activity)
// 	if err != nil {
// 		log.Println("Error fetching activity ID:", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• activityInfoID
// 	userActivityInfoID[State] = activityID
// 	log.Printf("Stored activityInfoID for user %s: %d", State, activityID)

// 	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
// 	userActivity[State] = activity
// 	log.Printf("Stored activity for user %s: %s", State, activity)

// 	// // ‡∏™‡πà‡∏á Flex Message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// 	// flexContainer := flexmessage.FormatStartActivity(activity)
// 	// flexMessage := linebot.NewFlexMessage("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", flexContainer)
// 	// if _, err := bot.ReplyMessage(event.ReplyToken, flexMessage).Do(); err != nil {
// 	// 	log.Printf("Error sending Flex Message: %v", err)
// 	// }

// 	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "wait status ActivityStart"
// 	userState[State] = "wait status ActivityStart"
// 	log.Println("wait status ActivityStart: ", userState)
// 	sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n‡πÄ‡∏ä‡πà‡∏ô 01/01/2567 11:20 ‡∏ô. ‡∏´‡∏£‡∏∑‡∏≠\n01/01/2567 ‡πÄ‡∏ß‡∏•‡∏≤ 11:20 ‡∏ô.")
// }

// func parseTimeInput(input string) (time.Time, error) {
// 	// üîπ ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô lower case
// 	input = strings.TrimSpace(strings.ToLower(input))

// 	// üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î regex ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ
// 	re := regexp.MustCompile(`^(\d{1,2})/(\d{1,2})/(\d{4})\s*(‡πÄ‡∏ß‡∏•‡∏≤)?\s*(\d{1,2})[:.](\d{2})\s*(‡∏ô\.?|‡∏ô)?$`)
// 	match := re.FindStringSubmatch(input)

// 	if len(match) == 0 {
// 		return time.Time{}, fmt.Errorf("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏ä‡πà‡∏ô 01/01/2567 11:20 ‡∏ô.")
// 	}

// 	// üîπ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å regex match
// 	day, month, yearStr := match[1], match[2], match[3]
// 	hour, min := match[5], match[6]

// 	// üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô int
// 	year, _ := strconv.Atoi(yearStr)

// 	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®. ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// 	if year > 2500 {
// 		year -= 543 // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‚Üí ‡∏Ñ.‡∏®.
// 	}

// 	// üîπ ‡πÉ‡∏ä‡πâ time.Parse() ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
// 	dateTimeStr := fmt.Sprintf("%s/%s/%d %s:%s", day, month, year, hour, min)
// 	layout := "02/01/2006 15:04"
// 	parsedTime, err := time.Parse(layout, dateTimeStr)
// 	if err != nil {
// 		return time.Time{}, fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ")
// 	}

// 	return parsedTime, nil
// }

// // ‡∏Å‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// func handleActivityStart(bot *linebot.Client, event *linebot.Event, State string) {
// 	log.Println("wait status ActivityStart:", userState)

// 	if userState[State] != "wait status ActivityStart" {
// 		log.Printf("Invalid state for user %s. Current state: %s", State, userState[State])
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n‡πÄ‡∏ä‡πà‡∏ô 01/01/2567 11:20 ‡∏ô. ‡∏´‡∏£‡∏∑‡∏≠\n01/01/2567 ‡πÄ‡∏ß‡∏•‡∏≤ 11:20 ‡∏ô. ")
// 		return
// 	}

// 	message, ok := event.Message.(*linebot.TextMessage)
// 	if !ok {
// 		log.Println("Event is not a text message")
// 		return
// 	}

// 	startTimeStr := strings.TrimSpace(message.Text)
// 	log.Printf("Received start time input: %s", startTimeStr)

// 	startTime, err := parseTimeInput(startTimeStr)
// 	if err != nil {
// 		sendReply(bot, event.ReplyToken, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô 01/01/2567 11:20 ‡∏ô. ‡∏´‡∏£‡∏∑‡∏≠\n01/01/2567 ‡πÄ‡∏ß‡∏•‡∏≤ 11:20 ‡∏ô.")
// 		return
// 	}

// 	now := time.Now()
// 	startTime = time.Date(now.Year(), now.Month(), now.Day(), startTime.Hour(), startTime.Minute(), 0, 0, now.Location())

// 	db, err := database.ConnectToDB()
// 	if err != nil {
// 		log.Printf("Database connection error: %v", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
// 		return
// 	}
// 	defer db.Close()

// 	activityRecordID, exists := userActivityRecordID[State]
// 	if exists {
// 		log.Printf("Updating start_time for activity_record_id=%d, start_time=%v", activityRecordID, startTime)
// 		err := UpdateActivityStartTime(db, activityRecordID, startTime)
// 		if err != nil {
// 			log.Printf("Error updating start_time: %v", err)
// 			sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
// 			return
// 		}
// 	} else {
// 		// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
// 		cardID := usercardidState[State]
// 		patient, err := GetPatientInfoByName(db, cardID)
// 		if err != nil {
// 			log.Printf("‚ùå Error fetching patient_info_id: %v", err)
// 			sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
// 			return
// 		}
// 		patientInfoID := patient.PatientInfo.PatientInfo_ID
// 		if patientInfoID == 0 {
// 			sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
// 			return
// 		}

// 		category, exists := userActivityCategory[State]
// 		if !exists {
// 			sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
// 			return
// 		}

// 		userInfo, err := GetUserInfoByLINEID(db, State)
// 		if err != nil {
// 			log.Printf("Error fetching user info: %v", err)
// 			sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
// 			return
// 		}
// 		userInfoID := userInfo.UserInfo_ID

// 		//‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡∏°‡∏¥‡∏ï‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// 		activityInfoID, exists := userActivityInfoID[State]
// 		activityOther := ""
// 		if category == "other" {
// 			activityOther = userActivity[State] // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
// 		} else {
// 			if !exists || activityInfoID == 0 {
// 				sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°")
// 				return
// 			}
// 		}

// 		log.Printf("Creating new activity record for patient_info_id=%d, activity_info_id=%d, activityOther=%s, start_time=%v", patientInfoID, activityInfoID, activityOther, startTime)
// 		newRecordID, err := InsertActivityStartTime(db, patientInfoID, category, activityInfoID, activityOther, startTime, userInfoID)
// 		if err != nil {
// 			log.Printf("Error inserting activity start time: %v", err)
// 			return
// 		}

// 		userActivityRecordID[State] = newRecordID
// 	}

// 	userState[State] = "wait status ActivityEnd"
// 	log.Printf("Updating userState for %s to wait status ActivityEnd", State)
// 	sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n‡πÄ‡∏ä‡πà‡∏ô 01/01/2567 11:20 ‡∏ô. ‡∏´‡∏£‡∏∑‡∏≠\n01/01/2567 ‡πÄ‡∏ß‡∏•‡∏≤ 11:20 ‡∏ô.")
// }

// func handleActivityEnd(bot *linebot.Client, event *linebot.Event, State string) {
// 	if userState[State] != "wait status ActivityEnd" {
// 		log.Printf("Invalid state for user %s. Current state: %s", State, userState[State])
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n‡πÄ‡∏ä‡πà‡∏ô 01/01/2567 11:20 ‡∏ô. ‡∏´‡∏£‡∏∑‡∏≠\n01/01/2567 ‡πÄ‡∏ß‡∏•‡∏≤ 11:20 ‡∏ô.")
// 		return
// 	}

// 	message, ok := event.Message.(*linebot.TextMessage)
// 	if !ok {
// 		log.Println("Event is not a text message")
// 		return
// 	}

// 	// ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
// 	endTimeStr := strings.TrimSpace(message.Text)
// 	log.Printf("Received end time input: %s", endTimeStr)

// 	// ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô parseTimeInput() ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤
// 	endTime, err := parseTimeInput(endTimeStr)
// 	if err != nil {
// 		sendReply(bot, event.ReplyToken, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô 01/01/2567 11:20 ‡∏ô. ‡∏´‡∏£‡∏∑‡∏≠\n01/01/2567 ‡πÄ‡∏ß‡∏•‡∏≤ 11:20 ‡∏ô.")
// 		return
// 	}

// 	db, err := database.ConnectToDB()
// 	if err != nil {
// 		log.Printf("Database connection error: %v", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
// 		return
// 	}
// 	defer db.Close()

// 	// ‡∏î‡∏∂‡∏á `activity_record_id`
// 	activityRecordID, exists := userActivityRecordID[State]
// 	if !exists {
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	// ‡∏î‡∏∂‡∏á `user_info_id` ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
// 	userID, err := GetUserInfoByLINEID(db, event.Source.UserID)
// 	if err != nil {
// 		log.Printf("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö user_info_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE ID: %s", event.Source.UserID)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
// 		return
// 	}

// 	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å `end_time` ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// 	err = UpdateActivityEndTime(db, activityRecordID, endTime, userID.UserInfo_ID)
// 	if err != nil {
// 		log.Printf("‚ùå Error updating end_time: %v", err)
// 		sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô
// 	sendReply(bot, event.ReplyToken, fmt.Sprintf("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"))

// 	// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "wait status Saveavtivityend"
// 	userState[State] = "wait status Saveavtivityend"
// }

// // ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// func handleSaveavtivityend(bot *linebot.Client, event *linebot.Event, cardID, userID string) {
// 	if userState[userID] != "wait status Saveavtivityend" {
// 		log.Printf("Invalid state for user %s. Current state: %s", userID, userState[userID])
// 		sendReply(bot, event.ReplyToken, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ôImage
// 	if imageMessage, ok := event.Message.(*linebot.ImageMessage); ok {
// 		log.Printf("Processing ImageMessage for user %s", userID)

// 		// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ wait status saveEvidenceImageActivity ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô saveEvidenceImageActivity
// 		userState[userID] = "wait status saveEvidenceImagebeforeActivity"
// 		log.Printf("Switching user state to 'wait status saveEvidenceImageActivity' for user %s", userID)

// 		//‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô saveEvidenceImageActivity ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// 		if err := handlesaveEvidenceImagebeforeActivity(bot, event, cardID, userID, imageMessage); err != nil {
// 			log.Printf("Error saving image: %v", err)
// 			sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 			return
// 		}

// 		// ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô wait status saveEvidenceTime ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô saveEvidenceImageTime
// 		userState[userID] = "wait status saveEvidenceImageafterActivity"
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°.")
// 	} else {
// 		log.Printf("Unhandled message type for user %s: %T", userID, event.Message)
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ.")
// 	}
// }

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// func handlesaveEvidenceImagebeforeActivity(bot *linebot.Client, event *linebot.Event, cardID, userID string, imageMessage *linebot.ImageMessage) error {
// 	if userState[userID] != "wait status saveEvidenceImagebeforeActivity" {
// 		log.Printf("Invalid state for user %s. Current state: %s", userID, userState[userID])
// 		sendReply(bot, event.ReplyToken, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return nil
// 	}
// 	//‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤=Image
// 	messageID := imageMessage.ID
// 	log.Printf("Processing ImageMessage for user %s with message ID: %s", userID, messageID)

// 	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û
// 	content, err := bot.GetMessageContent(messageID).Do()
// 	if err != nil {
// 		log.Printf("Error getting image content: %v", err)
// 		return err
// 	}
// 	defer content.Content.Close()

// 	db, err := database.ConnectToDB()
// 	if err != nil {
// 		log.Printf("Database connection error: %v", err)
// 		return err
// 	}
// 	defer db.Close()

// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
// 	patientInfoID, err := GetPatientInfoIDByCardID(db, cardID)
// 	if err != nil {
// 		return err
// 	}
// 	activity, err := GetActivityNameByPatientInfoID(db, patientInfoID)
// 	if err != nil {
// 		log.Printf("Error fetching activity name: %v", err)
// 		return err
// 	}
// 	// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô
// 	tempDir := os.TempDir()
// 	tempFilePath := fmt.Sprintf("%s\\%s.jpg", tempDir, messageID)
// 	file, err := os.Create(tempFilePath)
// 	if err != nil {
// 		log.Printf("Error creating temp file: %v", err)
// 		return err
// 	}
// 	defer file.Close()
// 	defer os.Remove(tempFilePath)

// 	// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE Messaging API ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
// 	if _, err := io.Copy(file, content.Content); err != nil {
// 		log.Printf("Error writing image content to file: %v", err)
// 		return err
// 	}

// 	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MinIO
// 	minioClient, err := database.ConnectToMinio()
// 	if err != nil {
// 		log.Printf("Error connecting to MinIO: %v", err)
// 		return err
// 	}
// 	bucketName := "nirunimages"
// 	objectName := fmt.Sprintf("Image before activity/%s/%d/%s.jpg", activity, patientInfoID, messageID)

// 	// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á MinIO
// 	fileURL, err := UploadFileToMinIO(minioClient, bucketName, objectName, tempFilePath)
// 	if err != nil {
// 		log.Printf("Error uploading file to MinIO: %v", err)
// 		return err
// 	}

// 	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// 	err = updateImagebeforeActivity(db, patientInfoID, fileURL)
// 	if err != nil {
// 		log.Printf("Error updating database: %v", err)
// 		return err
// 	}

// 	log.Printf("Activity Image successfully saved and URL updated: %s", fileURL)
// 	log.Printf("Last userID: %s", userID)
// 	return nil
// }

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
// func handlesaveEvidenceImageafterActivity(bot *linebot.Client, event *linebot.Event, cardID, userID string) error {
// 	if userState[userID] != "wait status saveEvidenceImageafterActivity" {
// 		log.Printf("Unhandled state for user %s. Current state: %s", userID, userState[userID])
// 		sendReply(bot, event.ReplyToken, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return nil
// 	}

// 	//‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤=Image
// 	if imageMessage, ok := event.Message.(*linebot.ImageMessage); ok {
// 		messageID := imageMessage.ID
// 		log.Printf("Processing ImageMessage for user %s with message ID: %s", userID, messageID)

// 		// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
// 		content, err := bot.GetMessageContent(messageID).Do()
// 		if err != nil {
// 			log.Printf("Error getting image content: %v", err)
// 			return err
// 		}
// 		defer content.Content.Close()

// 		db, err := database.ConnectToDB()
// 		if err != nil {
// 			log.Printf("Database connection error: %v", err)
// 			return err
// 		}
// 		defer db.Close()

// 		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
// 		patientInfoID, err := GetPatientInfoIDByCardID(db, cardID)
// 		if err != nil {
// 			return err
// 		}
// 		activity, err := GetActivityNameByPatientInfoID(db, patientInfoID)
// 		if err != nil {
// 			log.Printf("Error fetching activity name: %v", err)
// 			return err
// 		}

// 		// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
// 		tempDir := os.TempDir()
// 		tempFilePath := fmt.Sprintf("%s\\%s.jpg", tempDir, messageID)
// 		file, err := os.Create(tempFilePath)
// 		if err != nil {
// 			log.Printf("Error creating temp file: %v", err)
// 			return err
// 		}
// 		defer file.Close()
// 		defer os.Remove(tempFilePath)

// 		if _, err := io.Copy(file, content.Content); err != nil {
// 			log.Printf("Error writing image content to file: %v", err)
// 			return err
// 		}

// 		// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á MinIO
// 		minioClient, err := database.ConnectToMinio()
// 		if err != nil {
// 			log.Printf("Error connecting to MinIO: %v", err)
// 			return err
// 		}
// 		bucketName := "nirunimages"
// 		objectName := fmt.Sprintf("Image after activity/%s/%d/%s.jpg", activity, patientInfoID, messageID)

// 		// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á MinIO
// 		fileURL, err := UploadFileToMinIO(minioClient, bucketName, objectName, tempFilePath)
// 		if err != nil {
// 			log.Printf("Error uploading file to MinIO: %v", err)
// 			return err
// 		}

// 		// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// 		err = updateImageafterActivity(db, patientInfoID, fileURL)
// 		if err != nil {
// 			log.Printf("Error updating database: %v", err)
// 			return err
// 		}

// 		log.Printf("Evidence time image successfully saved and URL updated: %s", fileURL)

// 		userState[userID] = "wait status ConfirmOrSaveEmployee"
// 		// handleUserChoiceForActivityRecord(bot, event, userID, "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
// 		log.Printf("User state updated to: %s", userState[userID])

// 		sendReply(bot, event.ReplyToken, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡∏ô'  ")
// 		return nil
// 	}

// 	log.Printf("Unhandled message type for user %s: %T", userID, event.Message)
// 	sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ.")
// 	return nil
// }
// func handleUserChoiceForActivityRecord(bot *linebot.Client, event *linebot.Event, userID, selection string) {
// 	if userState[userID] != "wait status ConfirmOrSaveEmployee" {
// 		log.Printf("Invalid state for user %s. Current state: %s", userID, userState[userID])
// 		return
// 	}

// 	selection = strings.TrimSpace(selection)
// 	log.Printf("Received selection: %s", selection)

// 	switch selection {
// 	case "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡∏ô", "save_employee", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
// 		log.Printf("User %s selected to save record for another employee", userID)
// 		userState[userID] = "wait status saveActivityRecordForOtherEmployee"
// 		saveActivityRecordForOtherEmployee(bot, event, userID)

// 	case "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", "confirm", "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô":
// 		log.Printf("User %s selected to confirm activity record", userID)
// 		userState[userID] = "wait status confirmActivityRecordByUser"
// 		confirmActivityRecordByUser(bot, event, userID)

// 	default:
// 		log.Printf("Invalid selection by user %s: %s", userID, selection)
// 		sendReply(bot, event.ReplyToken, "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n- ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å\n- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡∏ô")
// 	}
// }

// func confirmActivityRecordByUser(bot *linebot.Client, event *linebot.Event, userID string) {
// 	if userState[userID] != "wait status confirmActivityRecordByUser" {
// 		log.Printf("Invalid state for user %s. Current state: %s", userID, userState[userID])
// 		return
// 	}

// 	db, err := database.ConnectToDB()
// 	if err != nil {
// 		log.Printf("Database connection error: %v", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}
// 	defer db.Close()

// 	// ‡∏î‡∏∂‡∏á activity_record_id ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
// 	activityRecord, err := GetLatestActivityRecord(db, userID)
// 	if err != nil {
// 		log.Printf("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UserID: %s", userID)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
// 	userInfo, err := GetUserInfoByLINEID(db, userID)
// 	if err != nil || userInfo.EmployeeInfo.EmployeeInfo_ID == 0 {
// 		log.Printf("User %s is not an employee", userID)
// 		sendReply(bot, event.ReplyToken, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡∏ô'")
// 		return
// 	}

// 	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å employee_info_id ‡∏•‡∏á activity_record
// 	err = UpdateActivityEmployeeID(db, activityRecord.ActivityRecord_ID, userInfo.EmployeeInfo.EmployeeInfo_ID, userInfo.UserInfo_ID)
// 	if err != nil {
// 		log.Printf("Error updating employee_info_id: %v", err)
// 		sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}

// 	sendReply(bot, event.ReplyToken, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
// 	userState[userID] = ""
// }

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô
// func saveActivityRecordForOtherEmployee(bot *linebot.Client, event *linebot.Event, userID string) {
// 	if userState[userID] != "wait status saveActivityRecordForOtherEmployee" {
// 		log.Printf("Invalid state for user %s. Current state: %s", userID, userState[userID])
// 		return
// 	}

// 	sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô:")
// 	userState[userID] = "wait status SaveEmployeeName"
// }

// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô
// func handleSaveEmployeeName(bot *linebot.Client, event *linebot.Event, userID, State, employeeName string) {
// 	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
// 	// log.Printf("User %s entered employee name (before trim): '%s'", userID, employeeName)

// 	employeeName = strings.TrimSpace(event.Message.(*linebot.TextMessage).Text)
// 	log.Printf("Received employee name: %s", employeeName)
// 	if employeeName == "" {
// 		sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£.")
// 		return
// 	}
// 	// //‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// 	// if employeeName == "" {
// 	// 	sendReply(bot, event.ReplyToken, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô")
// 	// 	return
// 	// }

// 	db, err := database.ConnectToDB()
// 	if err != nil {
// 		log.Printf("Database connection error: %v", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}
// 	defer db.Close()

// 	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ employeeID
// 	employeeID, err := GetEmployeeIDByName(db, employeeName)
// 	if err != nil {
// 		log.Printf("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• employee_info_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: '%s'", employeeName)
// 		sendReply(bot, event.ReplyToken, fmt.Sprintf("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠ %s\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà", employeeName))
// 		return
// 	}

// 	log.Printf("Employee ID found: %d for name: %s", employeeID, employeeName)

// 	//‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô activity_record
// 	cardID := usercardidState[State]
// 	patient, err := GetPatientInfoByName(db, cardID)
// 	if err != nil {
// 		log.Printf("Error fetching patient_info_id: %v", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
// 		return
// 	}
// 	//‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° LINE ID
// 	userInfo, err := GetUserInfoByLINEID(db, userID)
// 	if err != nil {
// 		log.Println("Error fetching user info:", err)
// 		sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}
// 	// ‡∏î‡∏∂‡∏á Activity Record ID
// 	activityRecordID, err := GetActivityRecordID(db, cardID)
// 	if err != nil {
// 		sendReply(bot, event.ReplyToken, err.Error())
// 		return
// 	}
// 	// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• activityRecord
// 	activityRecord := &models.Activityrecord{
// 		ActivityRecord_ID: activityRecordID.ActivityRecord_ID,
// 		PatientInfo: models.PatientInfo{
// 			CardID:         cardID,
// 			Name:           patient.PatientInfo.Name,
// 			PatientInfo_ID: patient.PatientInfo.PatientInfo_ID,
// 		},
// 		EmployeeInfo: models.EmployeeInfo{EmployeeInfo_ID: employeeID},
// 		UserInfo:     models.User_info{UserInfo_ID: userInfo.UserInfo_ID},
// 	}
// 	//‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
// 	// startTime, err := GetActivityStartTime(db, cardID, userActivity[userID])
// 	// if err != nil {
// 	// 	log.Printf("Error fetching StartTime: %v", err)
// 	// 	sendReply(bot, event.ReplyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
// 	// 	return
// 	// }
// 	// duration := activityRecord.EndTime.Sub(startTime)
// 	// activityRecord.Period = formatDuration(duration)

// 	log.Printf("Updating employee_info_id=%d for ActivityRecord_ID=%d", employeeID, activityRecord.ActivityRecord_ID)

// 	if err := UpdateActivityEmployee(db, activityRecord); err != nil {
// 		log.Printf("Error updating end time: %v", err)
// 		sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
// 		return
// 	}
// 	flexMessage := flexmessage.FormatactivityRecordEndtime([]models.Activityrecord{*activityRecord})
// 	if _, err := bot.ReplyMessage(event.ReplyToken, flexMessage).Do(); err != nil {
// 		log.Printf("Error sending reply message: %v", err)
// 		// sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 		return
// 	}
// 	// err = UpdateActivityEndTimeForPatient(db, activityRecord.ActivityRecord_ID, employeeID, 0)
// 	// if err != nil {
// 	// 	log.Printf("Error updating employee_info_id: %v", err)
// 	// 	sendReply(bot, event.ReplyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.")
// 	// 	return
// 	// }

// 	sendReply(bot, event.ReplyToken, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
// 	userState[userID] = ""
// }

// // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ
// // func formatDuration(d time.Duration) string {
// // 	hours := int(d.Hours())
// // 	minutes := int(d.Minutes()) % 60
// // 	return fmt.Sprintf("%d ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á %d ‡∏ô‡∏≤‡∏ó‡∏µ", hours, minutes)
// // }

// // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏´‡∏°
// func validateActivity(activity string) bool {
// 	allowedActivities := []string{
// 		"‡πÅ‡∏ä‡πà‡πÄ‡∏ó‡πâ‡∏≤", "‡∏ô‡∏ß‡∏î/‡∏õ‡∏£‡∏∞‡∏Ñ‡∏ö", "‡∏ù‡∏±‡∏á‡πÄ‡∏Ç‡πá‡∏°", "‡∏Ñ‡∏≤‡∏£‡∏≤‡πÇ‡∏≠‡πÄ‡∏Å‡∏∞", "‡∏Ñ‡∏£‡∏≠‡∏ö‡πÅ‡∏Å‡πâ‡∏ß",
// 		"‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "‡∏ô‡∏±‡πà‡∏á‡∏™‡∏°‡∏≤‡∏ò‡∏¥", "‡πÄ‡∏•‡πà‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏±‡∏ô‡∏ü‡∏±‡∏á", "‡∏ã‡∏∏‡πÇ‡∏î‡∏Å‡∏∏", "‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏†‡∏≤‡∏û",
// 	}
// 	for _, allowed := range allowedActivities {
// 		if activity == allowed {
// 			return true
// 		}
// 	}
// 	return false
// }

// func handleDefault(bot *linebot.Client, event *linebot.Event) {
// 	sendCustomReply(bot, event.ReplyToken, event.Source.UserID, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π")
// }

// // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
// func sendReply(bot *linebot.Client, replyToken, message string) {
// 	if _, err := bot.ReplyMessage(replyToken, linebot.NewTextMessage(message)).Do(); err != nil {
// 		log.Println("Error sending reply message funcsendReply:", err)
// 	}
// }

// // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°
// func sendReplyWithQuickReply(bot *linebot.Client, replyToken string, message string, quickReply *linebot.QuickReplyItems) {
// 	textMessage := linebot.NewTextMessage(message).WithQuickReplies(quickReply)
// 	if _, err := bot.ReplyMessage(replyToken, textMessage).Do(); err != nil {
// 		log.Printf("Error sending reply with quick reply: %v", err)
// 	}
// }
